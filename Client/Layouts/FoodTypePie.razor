@using FoodCards.Client.Script
@using FoodCards.Shared
@using FoodCards.Shared.Dish

@if(Compact)
{
    <PieChart Width="13" Height="13" PiePieces=@nutrients CenterText=@($"{Kalories} kcal")></PieChart>
}
else
{
    <div>
        <PieChart Width="15" Height="15" PiePieces=@nutrients CenterText=@($"{Kalories} kcal")></PieChart>
        <table style="margin-top:0.5rem">
            <tbody>
                @foreach (var nut in nutrients)
                {
                    <tr>
                        <td style="width:1rem">
                            <div style=@($"width:1rem;height: 1rem;margin-right:1rem;background-color:{nut.Color}")></div>
                        </td>
                        <td style="text-align:left">@nut.Text</td>
                        <td style="text-align:right;padding-inline:0.5rem">@($"{nut.Items}kcal")</td>
                        <td style="text-align:right">@($"{(int)(nut.Percentage * 100)}%")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    [Parameter]
    public bool Compact { get; set; }

    [Parameter]
    public decimal Kalories{ get; set; }

    List<PiePiece> nutrients = new();

    public async Task Recalculate(List<FoodItem> ingredients)
    {
        await InvokeAsync(() => Kalories = ingredients.Sum(x => x.Kalories * x.Coeficient));

        if (Kalories == 0)
        {
            await InvokeAsync(() =>
            {
                nutrients = new();
                StateHasChanged();
            });
            return;
        }

        var dairy = ingredients.Where(x => x.Type == IngredientType.EggsAndDairy).Sum(x => x.Kalories * x.Coeficient);
        var meats = ingredients.Where(x => x.Type == IngredientType.MeatAndFish).Sum(x => x.Kalories * x.Coeficient);
        var carbs = ingredients.Where(x => x.Type == IngredientType.GrainsAndPotatoes).Sum(x => x.Kalories * x.Coeficient);
        var vegies = ingredients.Where(x => x.Type == IngredientType.Vegetables).Sum(x => x.Kalories * x.Coeficient);
        var fruits = ingredients.Where(x => x.Type == IngredientType.Fruits).Sum(x => x.Kalories * x.Coeficient);
        var fats = ingredients.Where(x => x.Type == IngredientType.Fats).Sum(x => x.Kalories * x.Coeficient);
        var sweets = ingredients.Where(x => x.Type == IngredientType.SweetsAndAlcohol).Sum(x => x.Kalories * x.Coeficient);
        var processed = ingredients.Where(x => x.Type == IngredientType.Processed).Sum(x => x.Kalories * x.Coeficient);

        var dairyData = Const.Get(IngredientType.EggsAndDairy);
        var meatsData = Const.Get(IngredientType.MeatAndFish);
        var carbsData = Const.Get(IngredientType.GrainsAndPotatoes);
        var vegiesData = Const.Get(IngredientType.Vegetables);
        var fruitsData = Const.Get(IngredientType.Fruits);
        var fatsData = Const.Get(IngredientType.Fats);
        var sweetsData = Const.Get(IngredientType.SweetsAndAlcohol);
        var processedData = Const.Get(IngredientType.Processed);

        await InvokeAsync(() =>
        {
            nutrients = new()
                {
                new(dairyData, dairy, (decimal)dairy/Kalories),
                new(meatsData, meats, (decimal)meats/Kalories),
                new(carbsData, carbs, (decimal)carbs/Kalories),
                new(vegiesData, vegies, (decimal)vegies / Kalories),
                new(fruitsData, fruits, (decimal)fruits/Kalories),
                new(fatsData, fats, (decimal)fats/Kalories),
                new(sweetsData, sweets, (decimal)sweets/Kalories),
                new(processedData, processed, (decimal)processed/Kalories),
                };

            StateHasChanged(); 
        });
    }
}
