@using FoodCards.Client.Script
@using FoodCards.Client.Services
@using FoodCards.Shared
@using FoodCards.Shared.Dish
@inject DictionaryService d

@if(Compact)
{
    <PieChart Width=@Size Height=@Size PiePieces=@nutrients CenterText=@(HideText ? "" : $"{Kalories} kcal")></PieChart>
}
else
{
    <div>
        <PieChart Width="15" Height="15" PiePieces=@nutrients CenterText=@($"{Kalories} kcal")></PieChart>
        <table style="margin-top:0.5rem">
            <tbody>
                @foreach (var nut in nutrients)
                {
                    <tr>
                        <td style="width:1rem">
                            <div style=@($"width:1rem;height: 1rem;margin-right:1rem;background-color:{nut.Color}")></div>
                        </td>
                        <td style="text-align:left">@nut.Text</td>
                        <td style="text-align:right;padding-inline:0.5rem">@($"{(int)nut.Items}kcal")</td>
                        <td style="text-align:right">@($"{(int)(nut.Percentage * 100)}%")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    [Parameter]
    public bool Compact { get; set; }

    [Parameter]
    public bool HideText { get; set; }

    [Parameter]
    public decimal Kalories{ get; set; }

    [Parameter]
    public FoodItem Ingredient { get; set; }

    [Parameter]
    public int Size { get; set; } = 13;

    List<PiePiece> nutrients = new();

    protected override async Task OnInitializedAsync()
    {
          if (Ingredient != null)
              await Recalculate(new() { Ingredient });
    }

    public async Task Recalculate(List<FoodItem> ingredients = null)
    {
        if (ingredients == null)
            ingredients = new() { Ingredient };

        await InvokeAsync(() => Kalories = ingredients.Sum(x => x.FullKalories));

        if (Kalories == 0)
        {
            await InvokeAsync(() =>
            {
                nutrients = new();
                StateHasChanged();
            });
            return;
        }

        var dairy = ingredients.Where(x => x.Type == IngredientType.EggsAndDairy).Sum(x => x.FullKalories);
        var meats = ingredients.Where(x => x.Type == IngredientType.MeatAndFish).Sum(x => x.FullKalories);
        var carbs = ingredients.Where(x => x.Type == IngredientType.GrainsAndPotatoes).Sum(x => x.FullKalories);
        var vegies = ingredients.Where(x => x.Type == IngredientType.Vegetables).Sum(x => x.FullKalories);
        var fruits = ingredients.Where(x => x.Type == IngredientType.Fruits).Sum(x => x.FullKalories);
        var fats = ingredients.Where(x => x.Type == IngredientType.Fats).Sum(x => x.FullKalories);
        var sweets = ingredients.Where(x => x.Type == IngredientType.SweetsAndAlcohol).Sum(x => x.FullKalories);
        var processed = ingredients.Where(x => x.Type == IngredientType.Processed).Sum(x => x.FullKalories);

        var meals = ingredients.Where(x => x.Type == IngredientType.HomeMadeMeal).Select((x) => x as Meal);
        dairy += meals.Sum(x => x.Ingredients.Where(x => x.Type == IngredientType.EggsAndDairy).Sum(x => x.FullKalories));
        meats += meals.Sum(x => x.Ingredients.Where(x => x.Type == IngredientType.MeatAndFish).Sum(x => x.FullKalories));
        carbs += meals.Sum(x => x.Ingredients.Where(x => x.Type == IngredientType.GrainsAndPotatoes).Sum(x => x.FullKalories));
        vegies += meals.Sum(x => x.Ingredients.Where(x => x.Type == IngredientType.Vegetables).Sum(x => x.FullKalories));
        fruits += meals.Sum(x => x.Ingredients.Where(x => x.Type == IngredientType.Fruits).Sum(x => x.FullKalories));
        fats += meals.Sum(x => x.Ingredients.Where(x => x.Type == IngredientType.Fats).Sum(x => x.FullKalories));
        sweets += meals.Sum(x => x.Ingredients.Where(x => x.Type == IngredientType.SweetsAndAlcohol).Sum(x => x.FullKalories));
        processed += meals.Sum(x => x.Ingredients.Where(x => x.Type == IngredientType.Processed).Sum(x => x.FullKalories));

        var dairyDataColor = Const.Get(IngredientType.EggsAndDairy).Color;
        var meatsDataColor = Const.Get(IngredientType.MeatAndFish).Color;
        var carbsDataColor = Const.Get(IngredientType.GrainsAndPotatoes).Color;
        var vegiesDataColor = Const.Get(IngredientType.Vegetables).Color;
        var fruitsDataColor = Const.Get(IngredientType.Fruits).Color;
        var fatsDataColor = Const.Get(IngredientType.Fats).Color;
        var sweetsDataColor = Const.Get(IngredientType.SweetsAndAlcohol).Color;
        var processedDataColor = Const.Get(IngredientType.Processed).Color;

        var dairyDataName = d.FoodTypeName(IngredientType.EggsAndDairy);
        var meatsDataName = d.FoodTypeName(IngredientType.MeatAndFish);
        var carbsDataName = d.FoodTypeName(IngredientType.GrainsAndPotatoes);
        var vegiesDataName = d.FoodTypeName(IngredientType.Vegetables);
        var fruitsDataName = d.FoodTypeName(IngredientType.Fruits);
        var fatsDataName = d.FoodTypeName(IngredientType.Fats);
        var sweetsDataName = d.FoodTypeName(IngredientType.SweetsAndAlcohol);
        var processedDataName = d.FoodTypeName(IngredientType.Processed);

        await InvokeAsync(() =>
        {
            nutrients = new()
                {
                    new(dairyDataName, dairy, (decimal)dairy/Kalories, dairyDataColor),
                    new(meatsDataName, meats, (decimal)meats/Kalories, meatsDataColor),
                    new(carbsDataName, carbs, (decimal)carbs/Kalories, carbsDataColor),
                    new(vegiesDataName, vegies, (decimal)vegies / Kalories, vegiesDataColor),
                    new(fruitsDataName, fruits, (decimal)fruits/Kalories, fruitsDataColor),
                    new(fatsDataName, fats, (decimal)fats/Kalories, fatsDataColor),
                    new(sweetsDataName, sweets, (decimal)sweets/Kalories, sweetsDataColor),
                    new(processedDataName, processed, (decimal)processed/Kalories, processedDataColor),
                };

            StateHasChanged(); 
        });
    }
}
