@using FoodCards.Client.Script
@using FoodCards.Shared
@using FoodCards.Shared.Dish

@if (Meal != null && !Hide)
{
    @if (!Compact)
    {
        <div class="card free">
            <div class="container" style=@("column-gap: 2rem;")>
                <div>
                    <label style="display: ruby-text;">
                        Name:
                        <input @bind=@Meal.Name />
                    </label>
                    <table>
                        <tbody>
                            @foreach (var ingredient in Meal.Ingredients)
                            {
                                <tr>
                                    <td>
                                        <div class="img-holder" style="width:3rem;height:3rem;margin:0">
                                            @if (!string.IsNullOrEmpty(ingredient.Photo))
                                            {
                                                <img src=@($"images/{ingredient.Photo}") />
                                            }
                                        </div>
                                    </td>
                                    <td>@ingredient.Name</td>
                                    <td>
                                        <input type="number" @bind=@ingredient.Quantity.Quantity style="height: 1.2rem; width: 4rem;"
                                               @oninput=@(async() => await Recalculate()) />
                                    </td>
                                    <td>@ingredient.Quantity.MesurmentUnit</td>
                                    <td>
                                        <button type="button" @onclick=@(async() => await RemoveIngredient(ingredient))
                                        style="padding-inline: 0.5rem; background-color: hsl(0, 60%, 60%); border-radius: 3px;">
                                            -
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div style="margin-top:0.5rem">
                        <NutritionTable Kalories=@Meal.Kalories Nutrients=@nutrients></NutritionTable>
                    </div>
                </div>
                <FoodTypePie @ref=foodTypePie />
                <div style="width: max-content;">
                    <label>
                        <input type="checkbox" />
                        @DictionaryService.Breakfast
                    </label>
                    <label>
                        <input type="checkbox" />
                        @DictionaryService.Lunch
                    </label>
                    <label>
                        <input type="checkbox" />
                        @DictionaryService.Dinner
                    </label>
                    <label>
                        <input type="checkbox" />
                        @DictionaryService.Snack
                    </label>
                </div>
            </div>
            <div style="width: fit-content; height: fit-content;margin: auto; margin-top: 10px;">
                <div class="button" 
                    @onclick=@(() => {if(AcceptAction != null)AcceptAction();})>
                    Accept
                </div>
                <div class="button" @onclick=@(() => {if(CancelAction != null)CancelAction();})>
                    Cancel
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="card" @onclick=@(() => {if(Click != null)Click();})>
            <h3>@Meal.Name</h3>
            <div class="img-holder" style="margin-bottom: -2rem;">
                @if (!string.IsNullOrEmpty(Meal.Photo))
                {
                    <img src=@($"images/{Meal.Photo}") />
                }
            </div>
            <FoodTypePie @ref=foodTypePie Compact=true/>
        </div>
    }
}

@code {
    [Parameter]
    public bool Compact { get; set; }

    [Parameter]
    public bool Hide { get; set; }

    [Parameter]
    public Meal Meal { get; set; }

    [Parameter]
    public Action AcceptAction { get; set; }

    [Parameter]
    public Action CancelAction { get; set; }

    [Parameter]
    public Action Click { get; set; }

    FoodTypePie foodTypePie;

    Dictionary<string, decimal> nutrients;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
            await Recalculate();
    }

    public async Task AddIngredient(FoodItem ingredient)
    {
        if (Meal.Ingredients.Contains(ingredient))
            return;

        await InvokeAsync(() => Meal.Ingredients.Add(ingredient));
        await Recalculate();
    }

    async Task RemoveIngredient(FoodItem ingredient)
    {
        await InvokeAsync(() => Meal.Ingredients.Remove(ingredient));
        await Recalculate();
    }

    async Task Recalculate()
    {
        if (foodTypePie == null)
            return;

        await InvokeAsync(() => Meal.Calculate());
        await foodTypePie.Recalculate(Meal.Ingredients);
        await InvokeAsync(() =>
        {   
            nutrients = new()
            {
                {"Protein", Meal.Protein},
                {"Fat",Meal.Fat},
                {"Sat. Fat",Meal.SaturatedFat},
                {"Carbs",Meal.Carbohydrate},
                {"Sugar",Meal.Sugar},
                {"Salt",Meal.Salt},
                {"Fiber",Meal.Fiber}
            };
            StateHasChanged();
        });
    }
}

<style>
    .container{
        display: grid;
        grid-template-columns: auto auto auto;
    }
</style>
