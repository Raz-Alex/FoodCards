@using FoodCards.Client.Script
@using FoodCards.Shared
@using FoodCards.Shared.Dish

@*
	quant for nutrients
*@
@if(FoodItem != null && !Hide)
{
	@if (Editable)
	{
		<div class="card free" style="height:fit-content;width: min-content;">
			<form>
				<fieldset>
					<label>
						Name:
						<input @bind=@FoodItem.Name />
					</label>
					<label>
						Upload image:
						<input @bind=@FoodItem.Photo />
					</label>
					<label>
						Select food type:
						<select name="" size="1" @onchange=@((e) => ChangeType(e))>
							@foreach (var type in ingredientTypes)
							{
								@if(type != "None")
								{
									@if (type == FoodItem.Type.ToString())
									{
										<option value=@type selected>@type</option>
									}
									else
									{
										<option value=@type>@type</option>
									}
								}
							}
						</select>
						<!--input style="float:right" @bind=@FoodItem.Type /-->
					</label>
				</fieldset>
			</form>
			<form>
				<fieldset>
					<label>
						Kalories
						<input @bind=@FoodItem.Kalories
						@oninput=@(async(EventArgs) => await SetValue("Kalories",EventArgs.Value.ToString())) />
					</label>
					@foreach (var item in nutrients)
					{
						<label>
							@item.Key
							<input @bind=@nutrients[item.Key]
							@oninput=@(async(EventArgs) => await SetValue(item.Key,EventArgs.Value.ToString())) />
						</label>
					}
				</fieldset>
			</form>
			<div style="width: fit-content; height: fit-content;margin: auto; margin-top: 10px;">
				<div class="button" @onclick=@(() => {if(AcceptAction != null)AcceptAction();})>
					Accept
				</div>
				<div class="button" @onclick=@(() => {if(CancelAction != null)CancelAction();})>
					Cancel
				</div>
			</div>
		</div>
	}
	else
	{
		<div class="card" style=@Style() @onclick=@(() => {if(Click != null)Click();})>
			<h3>@FoodItem.Name</h3>
			<div class="img-holder">
				@if (!string.IsNullOrEmpty(FoodItem.Photo))
				{
					<img src=@($"images/{FoodItem.Photo}") />
				}
				<div class="img-caption"><h4>@caption</h4></div>
			</div>
			<NutritionTable Kalories=@FoodItem.Kalories Nutrients=@nutrients></NutritionTable>
		</div>
	}
}

@code {
	[Parameter]
	public bool Hide { get; set; }

	[Parameter]
	public bool Editable { get; set; }

	[Parameter]
	public FoodItem FoodItem { get; set; }

	[Parameter]
	public Action Click { get; set; }

	[Parameter]
	public Action AcceptAction { get; set; }

	[Parameter]
	public Action CancelAction { get; set; }

	Dictionary<string, decimal> nutrients;

	string caption;

	List<string> ingredientTypes = Enum.GetNames(typeof(IngredientType)).ToList();

	protected override async Task OnInitializedAsync()
	{
		if (FoodItem == null)
			return;

		await InvokeAsync(() =>
		{
			nutrients = new()
			{
				{"Protein",FoodItem.Protein},
				{"Fat",FoodItem.Fat},
				{"Sat. Fat",FoodItem.SaturatedFat},
				{"Carbs",FoodItem.Carbohydrate},
				{"Sugar",FoodItem.Sugar},
				{"Salt",FoodItem.Salt},
				{"Fiber",FoodItem.Fiber}
			};

			caption = Const.GetShortcut(FoodItem.Type);
		});
	}

	string Style()
	{
		var data = Const.Get(FoodItem.Type);
		var css = $"background-image:{data.Gradient};border:{data.Border};";
		return css;
	}

	async Task ChangeType(ChangeEventArgs e)
	{
		if (e.Value == null)
			return;

		_ = Enum.TryParse((string)e.Value, out IngredientType iType);
		await InvokeAsync(() => FoodItem.Type = iType);
	}

	async Task SetValue(string key,string value)
	{
		_ = decimal.TryParse(value, out decimal decimalValue);
		await InvokeAsync(() =>
		{
			switch(key)
			{
				case "Kalories":
					FoodItem.Kalories = decimalValue;
					break;
					
				case "Protein": 
					FoodItem.Protein = decimalValue;
					break;

				case "Fat":
					FoodItem.Fat = decimalValue;
					break;

				case "Sat. Fat":
					FoodItem.SaturatedFat = decimalValue;
					break;

				case "Carbs":
					FoodItem.Carbohydrate = decimalValue;
					break;

				case "Sugar":
					FoodItem.Sugar = decimalValue;
					break;

				case "Salt":
					FoodItem.Salt = decimalValue;
					break;

				case "Fiber":
					FoodItem.Fiber = decimalValue;
					break;
			}

			StateHasChanged();
		});
	}
}

<style>
	table{
		margin-top:0;
		width: 100%;
	}

	tr{
		height: 1.2rem
	}

	th{
		text-align:left
	}

	td {
		text-align: right
	}

	.img-holder {
		width: 9rem;
		height: 9rem ;
		margin: auto;
		margin-top: 0.5rem;
		margin-bottom: 0.5rem;
		align-content: center;
		position: relative;
	}

	.img-caption {
		position: absolute;
		bottom: 0.1rem;
		right: 0.1rem;
	}

	img {
		max-width: 100%;
		max-height: 100%;
	}

	label{
		display:block
	}

	input{
		text-align:right
	}
</style>