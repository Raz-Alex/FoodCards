@using FoodCards.Client.Script
@using FoodCards.Client.Services
@using FoodCards.Shared
@using FoodCards.Shared.Dish
@inject DictionaryService d

@if(FoodItem != null && !Hide)
{
	@if (Editable)
	{
		<div class="card free" style="height:fit-content;width: min-content;">
			<form>
				<fieldset style="width: max-content; margin-bottom: 1rem">
					<table>
						<tbody>
							<tr>
								<td>
									@d.Name
								</td>
								<td>
									<input style="width:9rem" @bind=@FoodItem.Name />
								</td>
							</tr>
							<tr>
								<td>
									@d.UploadImage
								</td>
								<td>
									<input style="width:9rem" @bind=@FoodItem.Photo />
								</td>
							</tr>
							<tr>
								<td>
									@d.FoodType
								</td>
								<td>
									<select style="width:9rem" name="" size="1" @onchange=@((e) => ChangeType(e))>
										@foreach (var type in ingredientTypes)
										{
											@if (type != "None")
											{
												@if (type == FoodItem.Type.ToString())
												{
													<option value=@type selected>@type</option>
												}
												else
												{
													<option value=@type>@type</option>
												}
											}
										}
									</select>
								</td>
							</tr>
						</tbody>
					</table>
				</fieldset>
			</form>
			<form>
				<fieldset style="width: max-content;">
					<table>
						<tbody>
							<tr>
								<td>
									@d.CalculateFor
								</td>
								<td>
									<input @bind=@FoodItem.Quantity type="number"
										   @oninput=@(async(EventArgs) => await SetValue("Quantity",EventArgs.Value.ToString())) />
								</td>
								<td>
									<select name="" size="1" @onchange=@(async (e) =>await SetValue("MesurmentUnit",(string)e.Value))>
										<option value="g" selected>@d.Grams</option>
										<option value="ml">@d.Milliliters</option>
										<option value="unit">@d.Unit</option>
									</select>
								</td>
							</tr>
							<tr>
								<td>
									@d.Calories
								</td>
								<td>
									<input @bind=@FoodItem.Kalories type="number"
										   @oninput=@(async(EventArgs) => await SetValue("Kalories",EventArgs.Value.ToString())) />
								</td>
							</tr>
							@foreach (var item in nutrients)
							{
								<tr>
									<td>
										@item.Key
									</td>
									<td>
										<input type="number" @bind=@nutrients[item.Key]
											   @oninput=@(async(EventArgs) => await SetValue(item.Key,EventArgs.Value.ToString())) />
									</td>
								</tr>
							}
						</tbody>
					</table>
				</fieldset>
			</form>
			<div style="width: fit-content; height: fit-content;margin: auto; margin-top: 10px;">
				<button @onclick=@(() => {if(AcceptAction != null)AcceptAction();})>
					Accept
				</button>
				<button @onclick=@(() => {if(CancelAction != null)CancelAction();})>
					Cancel
				</button>
			</div>
		</div>
	}
	else
	{
		<div class="card" style=@Style() @onclick=@(() => {if(Click != null)Click();})>
			<h3>@FoodItem.Name</h3>
			<div class="img-holder">
				@if (!string.IsNullOrEmpty(FoodItem.Photo))
				{
					<img src=@($"images/{FoodItem.Photo}") />
				}
				<div class="img-caption"><h4>@caption</h4></div>
			</div>
			<NutritionTable Kalories=@FoodItem.Kalories Nutrients=@nutrients
				BaseQuantity=@FoodItem.BaseQuantity MeasurmentUnit=@FoodItem.MesurmentUnit></NutritionTable>
		</div>
	}
}

@code {
	[Parameter]
	public bool Hide { get; set; }

	[Parameter]
	public bool Editable { get; set; }

	[Parameter]
	public FoodItem FoodItem { get; set; }

	[Parameter]
	public Action Click { get; set; }

	[Parameter]
	public Action AcceptAction { get; set; }

	[Parameter]
	public Action CancelAction { get; set; }

	Dictionary<string, decimal> nutrients;

	string caption;

	List<string> ingredientTypes = Enum.GetNames(typeof(IngredientType)).ToList();

	protected override async Task OnInitializedAsync()
	{
		if (FoodItem == null)
			return;

		await InvokeAsync(() =>
		{
			nutrients = new()
			{
				{"Protein",FoodItem.Protein},
				{"Fat",FoodItem.Fat},
				{"Sat. Fat",FoodItem.SaturatedFat},
				{"Carbs",FoodItem.Carbohydrate},
				{"Sugar",FoodItem.Sugar},
				{"Salt",FoodItem.Salt},
				{"Fiber",FoodItem.Fiber}
			};

			caption = d.FoodTypeShortCut(FoodItem.Type);
		});
	}

	string Style()
	{
		var data = Const.Get(FoodItem.Type);
		var css = $"background-image:{data.Gradient};border:{data.Border};";
		return css;
	}

	async Task ChangeType(ChangeEventArgs e)
	{
		if (e.Value == null)
			return;

		_ = Enum.TryParse((string)e.Value, out IngredientType iType);
		await InvokeAsync(() => FoodItem.Type = iType);
	}

	async Task SetValue(string key, string value)
	{
		_ = decimal.TryParse(value, out decimal decimalValue);
		await InvokeAsync(() =>
		{
			switch(key)
			{
				case "MesurmentUnit":
					FoodItem.MesurmentUnit = (string)value;
					FoodItem.Quantity = 1;
					FoodItem.BaseQuantity = 1;
					break;

				case "Quantity":
					FoodItem.Quantity = (int)decimalValue;
					break;

				case "Kalories":
					FoodItem.Kalories = decimalValue;
					break;
					
				case "Protein": 
					FoodItem.Protein = decimalValue;
					break;

				case "Fat":
					FoodItem.Fat = decimalValue;
					break;

				case "Sat. Fat":
					FoodItem.SaturatedFat = decimalValue;
					break;

				case "Carbs":
					FoodItem.Carbohydrate = decimalValue;
					break;

				case "Sugar":
					FoodItem.Sugar = decimalValue;
					break;

				case "Salt":
					FoodItem.Salt = decimalValue;
					break;

				case "Fiber":
					FoodItem.Fiber = decimalValue;
					break;
			}

			StateHasChanged();
		});
	}
}

<style>
	table{
		margin-top:0;
		width: 100%;
	}

	tr{
		height: 1.2rem
	}

	th{
		text-align:left
	}

	td {
		text-align: right
	}

	.img-holder {
		width: 9rem;
		height: 9rem ;
		margin: auto;
		margin-top: 0.5rem;
		margin-bottom: 0.5rem;
		align-content: center;
		position: relative;
	}

	.img-caption {
		position: absolute;
		bottom: 0.1rem;
		right: 0.1rem;
	}

	img {
		max-width: 100%;
		max-height: 100%;
	}

	label{
		display:block
	}

	input{
		text-align:right;
	}

		input[type="number"] {
			width:5rem
		}

	select{
		height: 1.2rem;
	}
</style>