@page "/Cards"
@using FoodCards.Client.Layouts
@using FoodCards.Client.Script
@using FoodCards.Shared
@inject NavigationManager nav

@if (newIngredient == null)
{
	<div class="card" style="width: fit-content; height: fit-content;">

		<div class="button" @onclick=@Home>
			Home
		</div>
		<div class="button" @onclick=@AddFoodItem>
			Add food item
		</div>
		<div class="button" @onclick=@Home>
			Create Meal
		</div>
		<div class="button" @onclick=@Home>
			Import food item
		</div>
		@*
		alter,
		remove - remove fast
		Import - import fast
	*@
	</div>
}

@if (newIngredient != null)
{
	<FoodCard FoodItem=@newIngredient Editable=true 
	AcceptAction=@(async () => await Accept()) CancelAction=@(async() => await Cancel())></FoodCard>
}

@if (ingredients != null)
{
	<div class="card" style="width: fit-content; height: fit-content;">
		@if(ingredientTypes != null)
		{
			@foreach(var type in ingredientTypes)
			{
				@if(type != "None")
				{
					_ = Enum.TryParse(type, out IngredientType iType);
					var iData = Const.Get(iType);
					<div class="filter-item"
						 style=@($"background-image:{iData.Gradient};border:{iData.Border};{(displayType == iType ? "border:2px double" : "")}")
						 @onclick=@(() => Filter(iType))>
						 @Const.GetShortcut(iType)
					</div>
				}
			}
		}
	</div>	
	<div>
		<!--div style="text-align: center;"-->
		@foreach (var ingredient in ingredients)
		{
			<FoodCard FoodItem=@ingredient Hide=@(displayType != IngredientType.None && displayType != ingredient.Type) />
		}
		<!--/div-->
	</div>
}

@code {
	List<Ingredient> ingredients;

	List<string> ingredientTypes = Enum.GetNames(typeof(IngredientType)).ToList();

	IngredientType displayType = IngredientType.None;

	Ingredient newIngredient;

	protected override void OnInitialized()
	{
		ingredients = new IngredientTable().Ingredients;
	}

	async Task Filter(IngredientType type)
	{
		if (displayType == type)
			await InvokeAsync(() => displayType = IngredientType.None);
		else
			await InvokeAsync(() => displayType = type);

		await InvokeAsync(() => StateHasChanged());
	}

	async Task Home()
	{
		await InvokeAsync(() => nav.NavigateTo("/"));
	}

	async Task AddFoodItem()
	{
		await InvokeAsync(() =>
		{
			newIngredient = new();
			StateHasChanged();
		});
	}

	async Task Accept()
	{
		await InvokeAsync(() => ingredients.Add(newIngredient));
		await Cancel();
	}

	async Task Cancel()
	{
		await InvokeAsync(() =>
		{
			newIngredient = null;
			StateHasChanged();
		});
	}
}

<style>
	.filter-item{
		padding:0.5rem;
		border-radius: 5px;
		display:inline-flex;
		margin-left:0.5rem
	}
</style>