@page "/Cards"
@using FoodCards.Client.Layouts
@using FoodCards.Client.Script
@using FoodCards.Shared
@inject NavigationManager nav

<div class="card" style="width: fit-content; height: fit-content;">
	<div class="button" @onclick=@Home>
		Home
	</div>
	<div class="button" @onclick=@Home>
		Add food item
	</div>
	<div class="button" @onclick=@Home>
		Create Meal
	</div>
	<div class="button" @onclick=@Home>
		Import food item
	</div>
	@*
		alter,
		remove - remove fast
		Import - import fast
	*@
</div>

@if (ingredients != null)
{
	<div class="card" style="width: fit-content; height: fit-content;">
		@if(ingredientTypes != null)
		{
			@foreach(var type in ingredientTypes)
			{
				_ = Enum.TryParse(type, out IngredientType iType);
				var iData = Const.Get(iType);
				<div class="filter-item"
				style=@($"background-image:{iData.Gradient};border:{iData.Border};{(filter.Contains(iType)? "border:2px double" : "")}")
				@onclick=@(() => Filter(iType))>
					@Const.GetShortcut(iType)
				</div>
			}
		}
	</div>	
	<div>
		<!--div style="text-align: center;"-->
		@foreach (var ingredient in ingredients)
		{
			@if(filter.Count == 0 || filter.Contains(ingredient.Type))
			{
				<FoodCard FoodItem=@ingredient />
			}
		}
		<!--/div-->
	</div>
}

@code {
	List<Ingredient> ingredients;

	List<string> ingredientTypes = Enum.GetNames(typeof(IngredientType)).ToList();

	List<IngredientType> filter = new();

	protected override void OnInitialized()
	{
		ingredients = new IngredientTable().Ingredients;
	}

	async Task Filter(IngredientType type)
	{
		if (filter.Contains(type))
			await InvokeAsync(() => filter.Remove(type));
		else
			await InvokeAsync(() => filter.Add(type));

		await InvokeAsync(() => StateHasChanged());
	}

	async Task Home()
	{
		await InvokeAsync(() => nav.NavigateTo("/"));
	}
}

<style>
	.filter-item{
		padding:0.5rem;
		border-radius: 5px;
		display:inline-flex;
		margin-left:0.5rem
	}
</style>