@page "/Cards"
@using FoodCards.Client.Helper
@using FoodCards.Client.Layouts
@using FoodCards.Client.Script
@using FoodCards.Client.Services
@using FoodCards.Shared
@using FoodCards.Shared.Dish
@inject NavigationManager nav

@if (newIngredient == null && newMeal == null && GetMeal == null)
{
	<div class="card" style="width: fit-content; height: fit-content;">
		<div class="button" @onclick=@Home>
			@DictionaryHelper.Home
		</div>
		<div class="button" @onclick=@AddFoodItem>
			@DictionaryHelper.AddFoodItem
		</div>
		<div class="button" @onclick=@CreateMeal>
			@DictionaryHelper.CreateMeal
		</div>
		@*
			PostPone for now
		<div class="button" @onclick=@Home>
			Import food item
		</div>

		alter,
		remove - remove fast
		Import - import fast
	*@
	</div>
}

@if (GetMeal != null)
{
	<MealCard @ref=@mealCard Meal=@buildMeal AcceptAction=@(async() => await Accept())
	CancelAction=@(async() => await InvokeAsync(() =>GetMeal(null)))></MealCard>
}

@if (newIngredient != null)
{
	<FoodCard FoodItem=@newIngredient Editable=true 
	AcceptAction=@(async () => await Accept()) 
	CancelAction=@(async() => await Cancel())></FoodCard>
}

@if (newMeal != null)
{
	<MealCard @ref=@mealCard Meal=@newMeal AcceptAction=@(async () => await Accept())
	CancelAction=@(async() => await Cancel())></MealCard>
}

@if (ingredients != null)
{
	<div class="card" style="width: fit-content; height: fit-content;">
		@if(ingredientTypes != null)
		{
			@foreach(var type in ingredientTypes)
			{
				@if(type != "None")
				{
					_ = Enum.TryParse(type, out IngredientType iType);
					var iData = Const.Get(iType);
					<div class="filter-item"
					style=@($"background-image:{iData.Gradient};border:{iData.Border};{(displayType == iType ? "border:2px double" : "")}")
					@onclick=@(() => Filter(iType))>
						@Const.GetShortcut(iType)
					</div>
				}
			}
		}
	</div>	
	<div>
		<!--div style="text-align: center;"-->
		@foreach (var nutrition in ingredients)
		{
			@if (nutrition is Meal meal)
			{
				<MealCard Meal=@meal Compact=true
				Hide=@(displayType != IngredientType.None && displayType != meal.Type) />
			}
			else if (nutrition is FoodItem ingredient)
			{
				<FoodCard FoodItem=@ingredient Click=@(async() =>await FoodCardClick(ingredient))
				Hide=@(displayType != IngredientType.None && displayType != ingredient.Type) />
			}
		}
		<!--/div-->
	</div>
}

@code {
	List<FoodItem> ingredients;

	List<string> ingredientTypes = Enum.GetNames(typeof(IngredientType)).ToList();

	IngredientType displayType = IngredientType.None;

	FoodItem newIngredient;

	Meal newMeal;

	Meal buildMeal;

	MealCard mealCard;

	[Parameter]
	public Action<FoodItem> GetMeal { get; set; }

	protected override void OnInitialized()
	{
		if (GetMeal != null)
			buildMeal = new();

		ingredients = new IngredientTable().Ingredients;
	}

	async Task Filter(IngredientType type)
	{
		if (displayType == type)
			await InvokeAsync(() => displayType = IngredientType.None);
		else
			await InvokeAsync(() => displayType = type);

		await InvokeAsync(() => StateHasChanged());
	}

	async Task Home()
	{
		await InvokeAsync(() => nav.NavigateTo("/"));
	}

	async Task AddFoodItem()
	{
		await InvokeAsync(() =>
		{
			newIngredient = new();
			StateHasChanged();
		});
	}

	async Task CreateMeal()
	{
		await InvokeAsync(() =>
		{
			newMeal = new();
			StateHasChanged();
		});
	}

	async Task FoodCardClick(FoodItem ingredient)
	{
		if (mealCard == null)
			return;

		await mealCard.AddIngredient(ingredient);
		await InvokeAsync(() => StateHasChanged());
	}

	async Task Accept()
	{
		if (newIngredient != null)
			await InvokeAsync(() => ingredients.Add(newIngredient));

		if(newMeal != null)
			await InvokeAsync(() => ingredients.Add(newMeal));

		if (buildMeal != null)
			await InvokeAsync(() => GetMeal(buildMeal));

		await Cancel();
	}

	async Task Cancel()
	{
		await InvokeAsync(() =>
		{
			newIngredient = null;
			newMeal = null;
			StateHasChanged();
		});
	}
}

<style>
	.filter-item{
		padding:0.5rem;
		border-radius: 5px;
		display:inline-flex;
		margin-left:0.5rem
	}
</style>