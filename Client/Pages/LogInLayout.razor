@using FoodCards.Client.Script
@using FoodCards.Client.Services
@using FoodCards.Shared
@inject AuthorizeMonitorService monitor
@inject NavigationManager nav
@inject LocalStorage storage
@inject AuthorizeHttpClient http
@inject IJSRuntime js

<div class="card free" style="text-align: center;">
    <form>
        <table style="margin-bottom:1rem;margin-top:0;border:none">
            <tbody>
                <tr>
                    <th>
                        <label for="username-text-id">Username</label>
                    </th>
                    <td>
                        <input id="username-text-id" type="text" @bind-value=@username />
                    </td>
                </tr>
                <tr>
                    <th>
                        <label for="password-text-id">Password</label>
                    </th>
                    <td>
                        <input id="password-text-id" type="password" @bind-value=@password />
                    </td>
                </tr>
            </tbody>
        </table>
    </form>
    <button class="log-in-button" type="button" @onclick=LogIn style="margin-bottom:1rem">
        Login
    </button>
    <button class="log-in-button" type="button" @onclick=Register>
        Register
    </button>
</div>

@code {
    string username;
    string password;

    User userData => new User
        {
            UserName = username,
            Password = password
        };

    bool IsNull => string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password);

    async Task LogIn()
    {
        if (IsNull)
            return;

        var user = await http.PostAsync<bool,User>("api/users/log-in", userData);
        if (user)
            await InvokeAsync(() => monitor.RecheckAuthorization());
    }

    async Task Register()
    {
        if (IsNull)
            return;

        var user = await http.PostAsync<ServerConfirmation, User>("api/users/register", userData);
        if (user != null && user.Status == ServerConfirmationStatus.OK)
            await LogIn();
        else
            await js.InvokeVoidAsync("alert", "User already exists");
    }
}

<style>
    tr:nth-child(2n) {
        background-color: transparent;
    }
</style>