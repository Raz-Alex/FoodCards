@using FoodCards.Client.Script
@using FoodCards.Client.Services
@using FoodCards.Shared
@inject AuthorizeMonitorService monitor
@inject NavigationManager nav
@inject LocalStorage storage
@inject AuthorizeHttpClient http
@inject IJSRuntime js

<div class="card" style="display:inline-flex">
    <table style="margin-bottom:0.2rem;">
        <tbody>
            <tr>
                <th>
                    <label for="username-text-id">Username</label>
                </th>
                <td>
                    <input id="username-text-id" type="text" @bind-value=@username />
                </td>
            </tr>
            <tr>
                <th>
                    <label for="password-text-id">Password</label>
                </th>
                <td>
                    <input id="password-text-id" type="password" @bind-value=@password />
                </td>
            </tr>
        </tbody>
    </table>
    <button class="log-in-button" type="button" @onclick=LogIn>
        <i class="material-icons button-icon">login</i>
    </button>
</div>

@code {
    string username;
    string password;

    User userData => new User
        {
            UserName = username,
            Password = password
        };

    bool IsNull => string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password);

    async Task LogIn()
    {
        if (IsNull)
            return;

        var user = await http.PostAsync<bool,User>("api/users/log-in", userData);
        if (user)
            await InvokeAsync(() => monitor.RecheckAuthorization());
    }

    async Task Register()
    {
        if (IsNull)
            return;

        var user = await http.PostAsync<ServerConfirmation, User>("api/users/register", userData);
        if (user != null && user.Status == ServerConfirmationStatus.OK)
            await LogIn();
        else
            await js.InvokeVoidAsync("alert", "User already exists");
    }
}
