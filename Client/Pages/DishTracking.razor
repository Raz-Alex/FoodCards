@using FoodCards.Client.Layouts
@using FoodCards.Client.Script
@using FoodCards.Shared
@using FoodCards.Shared.Dish
@inject DishSetUpDataService dishData
@inject NavigationManager nav

<div class="card free">
    <FoodTypePie @ref=@foodTypePie />
</div>
@if(!displayCardView)
{
    <div class="card free">
        <ul>
            <li class="li-btn" @onclick=@AddBreakfast>@DictionaryService.Breakfast</li>
            <li class="li-btn" @onclick=@AddLunch>@DictionaryService.Lunch</li>
            <li class="li-btn" @onclick=@AddDinner>@DictionaryService.Dinner</li>
            <li class="li-btn" @onclick=@AddSnacks>@DictionaryService.Snack</li>
        </ul>
    </div>
    <div class="card free">
        <ul>
            <li class="li-btn" @onclick="@OpenDishSetUpMenu">@DictionaryService.Goals</li>
        </ul>
        @if (chartBars.Count > 0)
        {
            <div style="margin-top: 2rem;">
                <BarChartVerticalView ChartBars=@chartBars></BarChartVerticalView>
            </div>
        }
    </div>
    @if (displayDishSetUp)
    {
        <segment>
            <DishSetUp Refresh=@(async() => await Recalculate())></DishSetUp>
        </segment>
    }
    <div class="card free">
        <div style="width: 10rem;height: 10rem">
            <img style="width: 100%;height 100%" src=@($"images/glass_water.jpg") />
        </div>
    </div>
    <div class="card free">
        <ul>
            <li class="li-btn" @onclick=@GotToDatabank>@DictionaryService.Databank</li>
        </ul>
    </div>
}
else
{
    <CardView GetMeal=@(async (x) => await GetMeal(x))></CardView>
}

@code {

    FoodTypePie foodTypePie;

    List<FoodItem> nutritions = new();

    DishTable ingredients = new();

    List<ChartBar> chartBars = new();

    bool displayDishSetUp;

    bool displayCardView;

    async Task GotToDatabank()
    {
        await InvokeAsync(() =>nav.NavigateTo("/Cards"));
    }

    async Task AddBreakfast()
    {
        await ShowCardView();
    }

    async Task AddLunch()
    {
        await ShowCardView();
    }

    async Task AddDinner()
    {
        await ShowCardView();
    }

    async Task AddSnacks()
    {
        await ShowCardView();
    }

    async Task ShowCardView()
    {
        await InvokeAsync(() => displayCardView = true);
    }

    async Task GetMeal(FoodItem foodItem)
    {
        await InvokeAsync(() =>
        {
            if (foodItem != null)
                nutritions.Add(foodItem);

            displayCardView = false;
        });

        if (foodItem != null)
            await Recalculate();
        else
            await InvokeAsync(() => StateHasChanged());
    }

    async Task Recalculate()
    {
        var kalories = nutritions.Sum(x => x.FullKalories);
        var dairy = nutritions.Where(x => x.Type == IngredientType.EggsAndDairy).Sum(x => x.FullKalories);
        var meats = nutritions.Where(x => x.Type == IngredientType.MeatAndFish).Sum(x => x.FullKalories);
        var carbs = nutritions.Where(x => x.Type == IngredientType.GrainsAndPotatoes).Sum(x => x.FullKalories);
        var vegies = nutritions.Where(x => x.Type == IngredientType.Vegetables).Sum(x => x.FullKalories);
        var fruits = nutritions.Where(x => x.Type == IngredientType.Fruits).Sum(x => x.FullKalories);
        var fats = nutritions.Where(x => x.Type == IngredientType.Fats).Sum(x => x.FullKalories);
        var sweets = nutritions.Where(x => x.Type == IngredientType.SweetsAndAlcohol).Sum(x => x.FullKalories);
        var processed = nutritions.Where(x => x.Type == IngredientType.Processed).Sum(x => x.FullKalories);

        var meals = nutritions.Where(x => x.Type == IngredientType.HomeMadeMeal).Select((x) => x as Meal);
        dairy += meals.Sum(x => x.Ingredients.Where(x => x.Type == IngredientType.EggsAndDairy).Sum(x => x.FullKalories));
        meats += meals.Sum(x => x.Ingredients.Where(x => x.Type == IngredientType.MeatAndFish).Sum(x => x.FullKalories));
        carbs += meals.Sum(x => x.Ingredients.Where(x => x.Type == IngredientType.GrainsAndPotatoes).Sum(x => x.FullKalories));
        vegies += meals.Sum(x => x.Ingredients.Where(x => x.Type == IngredientType.Vegetables).Sum(x => x.FullKalories));
        fruits += meals.Sum(x => x.Ingredients.Where(x => x.Type == IngredientType.Fruits).Sum(x => x.FullKalories));
        fats += meals.Sum(x => x.Ingredients.Where(x => x.Type == IngredientType.Fats).Sum(x => x.FullKalories));
        sweets += meals.Sum(x => x.Ingredients.Where(x => x.Type == IngredientType.SweetsAndAlcohol).Sum(x => x.FullKalories));
        processed += meals.Sum(x => x.Ingredients.Where(x => x.Type == IngredientType.Processed).Sum(x => x.FullKalories));

        var dairyData = Const.Get(IngredientType.EggsAndDairy);
        var meatsData = Const.Get(IngredientType.MeatAndFish);
        var carbsData = Const.Get(IngredientType.GrainsAndPotatoes);
        var vegiesData = Const.Get(IngredientType.Vegetables);
        var fruitsData = Const.Get(IngredientType.Fruits);
        var fatsData = Const.Get(IngredientType.Fats);
        var sweetsData = Const.Get(IngredientType.SweetsAndAlcohol);
        var processedData = Const.Get(IngredientType.Processed);

        await foodTypePie.Recalculate(nutritions);

        chartBars = new();
        if (dishData.DailyKalories > 0)
            chartBars.Add(new("Kalories", kalories / dishData.DailyKalories, $"{kalories}kcal"));

        var kal = kalories * 0.01m;
        if (dishData.EggsAndDairy > 0)
            chartBars.Add(new(dairyData.Name, dairy / kal / dishData.EggsAndDairy, $"{dairy}kcal"));
        if (dishData.MeatAndFish > 0)
            chartBars.Add(new(meatsData.Name, meats / kal / dishData.MeatAndFish, $"{meats}kcal"));
        if (dishData.GrainsAndPotatoes > 0)
            chartBars.Add(new(carbsData.Name, carbs / kal / dishData.GrainsAndPotatoes, $"{carbs}kcal"));
        if (dishData.Vegetables > 0)
            chartBars.Add(new(vegiesData.Name, vegies / kal / dishData.Vegetables, $"{vegies}kcal"));
        if (dishData.Fruits > 0)
            chartBars.Add(new(fruitsData.Name, fruits / kal / dishData.Fruits, $"{fruits}kcal"));
        if (dishData.Fats > 0)
            chartBars.Add(new(fatsData.Name, fats / kal / dishData.Fats, $"{fats}kcal"));
        if (dishData.SweetsAndAlcohol > 0)
            chartBars.Add(new(sweetsData.Name, sweets / kal / dishData.SweetsAndAlcohol, $"{sweets}kcal"));
        if (dishData.Processed > 0)
            chartBars.Add(new(processedData.Name, processed / kal / dishData.Processed, $"{processed}kcal"));

        await InvokeAsync(() => StateHasChanged());
    }

    async Task OpenDishSetUpMenu()
    {
        await InvokeAsync(() => displayDishSetUp = !displayDishSetUp);
    }
}

<style>
    .li-btn {
        padding: 0.5rem;
        border: 1px solid hsl(210, 75%, 87%);
        border-radius: 5px;
    }

    li {
        margin: 0.5rem;
    }
</style>

