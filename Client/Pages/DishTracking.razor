@using FoodCards.Client.Layouts
@using FoodCards.Client.Script
@using FoodCards.Shared
@using FoodCards.Shared.Dish

<div style="display:flex">
    <div class="card">
        <PieChart Width="15" Height="15" PiePieces=@nutrients CenterText=@($"{kalories} kcal")></PieChart>
        <table style="border:none;">
            <tbody>
                @foreach (var nut in nutrients)
                {
                    <tr>
                        <td style="width:1rem">
                            <div style=@($"width:1rem;height: 1rem;margin-right:1rem;background-color:{nut.Color}")></div>
                        </td>
                        <td style="text-align:left">@nut.Text</td>
                        <td style="text-align:right;padding-inline:0.5rem">@($"{nut.Items}kcal")</td>
                        <td style="text-align:right">@($"{(int)(nut.Percentage * 100)}%")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div>
        <div class="card">
            <ul>
                <li class="li-btn" @onclick=@AddBreakfast>Breakfast</li>
                <li class="li-btn" @onclick=@AddLunch>Lunch</li>
                <li class="li-btn" @onclick=@AddDinner>Dinner</li>
                <li class="li-btn" @onclick=@AddSnacks>Snacks</li>
            </ul>
        </div>
        <div class="card">
            Databank
        </div>
    </div>
</div>
<div class="card">
    <h3 style="margin:auto;margin-bottom:0.5rem">Goals</h3>
    <BarChartVerticalView ChartBars=@chartBars></BarChartVerticalView>
    <!--p>Kalories bar</p>
    <p>Goal Reached!</p>
    <p>Warning! match</p-->
</div>

@code {
    decimal kalories;

    List<PiePiece> nutrients = new();

    List<IDish> nutritions = new();

    DishTable ingredients = new();

    List<ChartBar> chartBars = new();

    DishSetUpData dishData = new();

    async Task AddBreakfast()
    {
        await InvokeAsync(() => nutritions.Add(ingredients.Ingredients[1]));
        await Recalculate();
    }

    async Task AddLunch()
    {
        await InvokeAsync(() => nutritions.Add(ingredients.Ingredients[0]));
        await Recalculate();
    }

    async Task AddDinner()
    {
        await InvokeAsync(() => nutritions.Add(ingredients.Ingredients[5]));
        await Recalculate();
    }

    async Task AddSnacks()
    {
        await InvokeAsync(() => nutritions.Add(ingredients.Ingredients[4]));
        await Recalculate();
    }

    async Task Recalculate()
    {
        kalories = nutritions.Sum(x => x.Kalories);
        var dairy = nutritions.Where(x => x.Type == IngredientType.EggsAndDairy).Sum(x => x.Kalories);
        var meats = nutritions.Where(x => x.Type == IngredientType.MeatAndFish).Sum(x => x.Kalories);
        var carbs = nutritions.Where(x => x.Type == IngredientType.GrainsAndPotatoes).Sum(x => x.Kalories);
        var vegies = nutritions.Where(x => x.Type == IngredientType.Vegetables).Sum(x => x.Kalories);
        var fruits = nutritions.Where(x => x.Type == IngredientType.Fruits).Sum(x => x.Kalories);
        var fats = nutritions.Where(x => x.Type == IngredientType.Fats).Sum(x => x.Kalories);
        var sweets = nutritions.Where(x => x.Type == IngredientType.SweetsAndAlcohol).Sum(x => x.Kalories);
        var processed = nutritions.Where(x => x.Type == IngredientType.Processed).Sum(x => x.Kalories);

        nutrients = new()
        {
            new(TextDictionary.Get(IngredientType.EggsAndDairy), dairy, (decimal)dairy/kalories, "hsl(0, 0%, 90%)"),
            new(TextDictionary.Get(IngredientType.MeatAndFish), meats, (decimal)meats/kalories, "hsl(0, 75%, 50%)"),
            new(TextDictionary.Get(IngredientType.GrainsAndPotatoes), carbs, (decimal)carbs/kalories, "hsl(60, 75%, 50%)"),
            new(TextDictionary.Get(IngredientType.Vegetables), vegies, (decimal)vegies / kalories, "hsl(120, 75%, 50%)"),
            new(TextDictionary.Get(IngredientType.Fruits), fruits, (decimal)fruits/kalories, "hsl(180, 75%, 50%)"),
            new(TextDictionary.Get(IngredientType.Fats), fats, (decimal)fats/kalories, "hsl(240, 75%, 50%)"),
            new(TextDictionary.Get(IngredientType.SweetsAndAlcohol), sweets, (decimal)sweets/kalories, "hsl(300, 75%, 50%)"),
            new(TextDictionary.Get(IngredientType.Processed), processed, (decimal)processed/kalories, "hsl(0, 0%, 10%)"),
        };

        chartBars = new();
        if (dishData.DailyKalories > 0)
            chartBars.Add(new("Kalories", kalories / dishData.DailyKalories, $"{kalories}kcal"));
        if (dishData.EggsAndDairy > 0)
            chartBars.Add(new(TextDictionary.Get(IngredientType.EggsAndDairy), dairy / kalories / dishData.EggsAndDairy, $"{dairy}kcal"));
        if (dishData.MeatAndFish > 0)
            chartBars.Add(new(TextDictionary.Get(IngredientType.MeatAndFish), meats / kalories / dishData.MeatAndFish, $"{meats}kcal"));
        if (dishData.GrainsAndPotatoes > 0)
            chartBars.Add(new(TextDictionary.Get(IngredientType.GrainsAndPotatoes), carbs / kalories / dishData.GrainsAndPotatoes, $"{carbs}kcal"));
        if (dishData.Vegetables > 0)
            chartBars.Add(new(TextDictionary.Get(IngredientType.Vegetables), vegies / kalories / dishData.Vegetables, $"{vegies}kcal"));
        if (dishData.Fruits > 0)
            chartBars.Add(new(TextDictionary.Get(IngredientType.Fruits), fruits / kalories / dishData.Fruits, $"{fruits}kcal"));
        if (dishData.Fats > 0)
            chartBars.Add(new(TextDictionary.Get(IngredientType.Fats), fats / kalories / dishData.Fats, $"{fats}kcal"));
        if (dishData.SweetsAndAlcohol > 0)
            chartBars.Add(new(TextDictionary.Get(IngredientType.SweetsAndAlcohol), sweets / kalories / dishData.SweetsAndAlcohol, $"{sweets}kcal"));
        if (dishData.Processed > 0)
            chartBars.Add(new(TextDictionary.Get(IngredientType.Processed), sweets / kalories / dishData.Processed, $"{sweets}kcal"));

        await InvokeAsync(() => StateHasChanged());
    }
}

<style>
    .card {
        width: fit-content;
        height: fit-content;
    }

    .li-btn {
        padding: 0.5rem;
        border: 1px solid hsl(210, 75%, 87%);
        border-radius: 5px;
    }

    li {
        margin: 0.5rem;
    }
</style>

