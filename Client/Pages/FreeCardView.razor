@using FoodCards.Client.Layouts
@using FoodCards.Client.Script
@using FoodCards.Client.Services
@using FoodCards.Shared.Dish
@inject AuthorizeHttpClient http
@inject DictionaryService d

@if (error != null)
{
	<h2>@error</h2>	
}

<div class="container">
	@if (GetMeal != null)
	{
		<MealCard @ref=@mealCard Meal=@buildMeal AcceptAction=@(async() => await Accept())
			CancelAction=@(async() => await Cancel()) HideType></MealCard>
	}

	<input type="search" name="" value="" placeholder="search ingredient">

	@if (ingredients != null)
	{
		@*
		<div class="card" style="width: fit-content; height: fit-content; padding-top: 0.5rem;position:relative">
			<p style="position:absolute;top: -0.8rem;">Filter</p>
			@if (ingredientTypes != null)
			{
				@foreach (var type in ingredientTypes)
				{
					@if (type != "None")
					{
						_ = Enum.TryParse(type, out IngredientType iType);
						var iData = Const.Get(iType);
						<div class="filter-item"
							style=@($"background-image:{iData.Gradient};border:{iData.Border};{(displayType == iType ? "border:2px double" : "")}")
							@onclick=@(() => Filter(iType))>
							@d.FoodTypeShortCut(iType)
						</div>
					}
				}
			}
		</div>
		*@
		<div style="float:left">
			@foreach (var nutrition in ingredients)
			{
				@if (nutrition is FoodItem ingredient)
				{
					<FoodCard FoodItem=@ingredient Click=@(async() =>await FoodCardClick(ingredient))
					Hide=@(displayType != IngredientType.None && displayType != ingredient.Type) />
				}
			}
		</div>
	}
</div>

@code {
	List<FoodItem> ingredients;

	List<string> ingredientTypes = Enum.GetNames(typeof(IngredientType)).ToList();

	IngredientType displayType = IngredientType.None;

	Meal buildMeal;

	MealCard mealCard;

	[Parameter]
	public Meal Meal { get; set; }

	[Parameter]
	public string MealName { get; set; }

	[Parameter]
	public Action<FoodItem> GetMeal { get; set; }

	[Parameter]
	public Action CancelAction { get; set; }

	string error;

	protected override async Task OnInitializedAsync()
	{
		if (Meal != null)
		{
			await InvokeAsync(() => buildMeal = Meal);
		}
		else if (GetMeal != null)
			await InvokeAsync(() => buildMeal = new(){Name = MealName});

		var foodItems = await http.GetAsync<List<FoodItem>>("api/food-items/load-all-fooditems");
		if (foodItems != null)
			await InvokeAsync(() => ingredients = foodItems);
		else
		{
			var errorResult = await http.GetAsync<List<string>>("api/food-items/error");
			await InvokeAsync(() =>
			{
				error = errorResult.FirstOrDefault();
				StateHasChanged();
			});
		}
	}

	async Task Filter(IngredientType type)
	{
		await InvokeAsync(() =>
		{
			displayType = displayType == type ? IngredientType.None : type;
			StateHasChanged();
		});
	}

	async Task FoodCardClick(FoodItem ingredient)
	{
		if (mealCard == null)
			return;

		await mealCard.AddIngredient(ingredient);
		await InvokeAsync(() => StateHasChanged());
	}

	async Task Accept()
	{
		if (buildMeal != null)
			await InvokeAsync(() => GetMeal(buildMeal));
	}

	async Task Cancel()
	{
		if (CancelAction != null)
			await InvokeAsync(() => CancelAction());
	}
}

<style>
	.filter-item {
		padding: 0.5rem;
		border-radius: 5px;
		display: inline-flex;
		margin-left: 0.5rem;
		margin-top: 0.5rem;
	}

	.container {
		display:grid;
		grid-template-columns: 25rem auto;
	}
</style>